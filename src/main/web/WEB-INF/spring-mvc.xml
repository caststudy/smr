<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	   xmlns:context="http://www.springframework.org/schema/context"
	   xmlns:mvc="http://www.springframework.org/schema/mvc"
	   xmlns:aop="http://www.springframework.org/schema/aop"
	   xmlns:tx="http://www.springframework.org/schema/tx"
	   xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd
       http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd
	   http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd">


	<import resource="spring-redis.xml"/>

	<mvc:annotation-driven></mvc:annotation-driven>

	<mvc:resources location="/static/" mapping="/web/**" />
  	<context:component-scan base-package="com.smr" />
	<!-- 配置视图解析规则 -->
	<bean
		class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="prefix" value="/WEB-INF/" />
		<property name="suffix" value=".jsp" />
	</bean>



<!-- 配置数据源 -->
	<bean id="dataSource" class="org.apache.tomcat.dbcp.dbcp2.BasicDataSource">
		<property name="driverClassName" value="com.mysql.cj.jdbc.Driver"></property>
		<property name="url" value="jdbc:mysql://localhost:3306/njdb?serverTimezone=UTC"></property>
		<property name="username" value="root"></property>
		<property name="password" value="123456"></property>
		<property name="initialSize" value="10"></property>
		<property name="maxIdle" value="5"></property>
	</bean>	

	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<!--  引用数据库连接池 -->
		<property name="dataSource" ref="dataSource" />
		<!-- 	加载mybatis-config.xml 配置-->
		<property name="configLocation" value="classpath:mybatis-config.xml">
		</property>
		<!--    <property name="mapperLocations" value="classpath:com/spring/mapper/*.xml">		
			<list>	<value>com/spring/entity/Zp.xml</value> 			</list>			
		</property>  		 -->
	</bean>


	<!-- 在spring容器中配置mapper的扫描器产生的动态代理对象在spring的容器中自动注册，bean的id就是mapper类名（首字母小写）-->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<!-- 指定扫描包的路径，就是mapper接口的路径，多个包中间以 半角逗号隔开   -->
		<property name="basePackage" value="com.smr.mapper"/>
		<!-- 配置sqlSessionFactoryBeanName -->
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
	</bean>

	<aop:aspectj-autoproxy proxy-target-class="true" />


	<!-- 定义日志切面实例 -->
	<bean id="logAspect" class="com.smr.aop.TestAop" />

	<!-- 使用XML方式进行AOP配置 -->
	<aop:config>
		<!-- 使用XML方式配置日志切面 -->
		<aop:aspect id="logaop" ref="logAspect">
			<!--
				定义切入点，切入点正则表达式execution(* com.zsz.action.TestAction.*(..))
				的意思是拦截test.spring.action.UserAction类中的所有方法,不论方法参数有无, 也不管返回结果为何类型。
				第一个*代表所有的返回值类型
				第二个*代表类所有方法
				最后一个..代表所有的参数。
			-->
			<aop:pointcut id="logpointcut"
						  expression="execution(* com.smr.service.Func1ServiceImpl.*(..))"   />

			<!-- 将LogAspectJ切面中的BeforeAdvice方法定义成前置通知 -->
			<aop:before pointcut-ref="logpointcut" method="BeforeAdvice" />
			<!-- 将LogAspectJ切面中的AfterReturningAdvice方法定义成后置通知 -->
			<aop:after-returning pointcut-ref="logpointcut"
								 method="AfterReturningAdvice" />
			<!-- 将LogAspectJ切面中的AfterThrowingAdvice方法定义成异常通知 -->
			<aop:after-throwing pointcut-ref="logpointcut"
								method="AfterThrowingAdvice" throwing="e" />
			<!-- 将LogAspectJ切面中的AfterAdvice方法定义成最终通知 -->
			<aop:after pointcut-ref="logpointcut" method="AfterAdvice" />
			<!-- 将LogAspectJ切面中的AroundAdvice方法定义成环绕通知 -->
			<aop:around pointcut-ref="logpointcut" method="AroundAdvice" />
		</aop:aspect>
	</aop:config>

</beans>
